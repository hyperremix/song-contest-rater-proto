// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: participation_service.proto

package songcontestraterprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Participation_ListParticipations_FullMethodName  = "/songcontestrater.Participation/ListParticipations"
	Participation_CreateParticipation_FullMethodName = "/songcontestrater.Participation/CreateParticipation"
	Participation_DeleteParticipation_FullMethodName = "/songcontestrater.Participation/DeleteParticipation"
)

// ParticipationClient is the client API for Participation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParticipationClient interface {
	ListParticipations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListParticipationsResponse, error)
	CreateParticipation(ctx context.Context, in *CreateParticipationRequest, opts ...grpc.CallOption) (*ParticipationResponse, error)
	DeleteParticipation(ctx context.Context, in *DeleteParticipationRequest, opts ...grpc.CallOption) (*ParticipationResponse, error)
}

type participationClient struct {
	cc grpc.ClientConnInterface
}

func NewParticipationClient(cc grpc.ClientConnInterface) ParticipationClient {
	return &participationClient{cc}
}

func (c *participationClient) ListParticipations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListParticipationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListParticipationsResponse)
	err := c.cc.Invoke(ctx, Participation_ListParticipations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participationClient) CreateParticipation(ctx context.Context, in *CreateParticipationRequest, opts ...grpc.CallOption) (*ParticipationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParticipationResponse)
	err := c.cc.Invoke(ctx, Participation_CreateParticipation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participationClient) DeleteParticipation(ctx context.Context, in *DeleteParticipationRequest, opts ...grpc.CallOption) (*ParticipationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParticipationResponse)
	err := c.cc.Invoke(ctx, Participation_DeleteParticipation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParticipationServer is the server API for Participation service.
// All implementations must embed UnimplementedParticipationServer
// for forward compatibility.
type ParticipationServer interface {
	ListParticipations(context.Context, *emptypb.Empty) (*ListParticipationsResponse, error)
	CreateParticipation(context.Context, *CreateParticipationRequest) (*ParticipationResponse, error)
	DeleteParticipation(context.Context, *DeleteParticipationRequest) (*ParticipationResponse, error)
	mustEmbedUnimplementedParticipationServer()
}

// UnimplementedParticipationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParticipationServer struct{}

func (UnimplementedParticipationServer) ListParticipations(context.Context, *emptypb.Empty) (*ListParticipationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParticipations not implemented")
}
func (UnimplementedParticipationServer) CreateParticipation(context.Context, *CreateParticipationRequest) (*ParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParticipation not implemented")
}
func (UnimplementedParticipationServer) DeleteParticipation(context.Context, *DeleteParticipationRequest) (*ParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParticipation not implemented")
}
func (UnimplementedParticipationServer) mustEmbedUnimplementedParticipationServer() {}
func (UnimplementedParticipationServer) testEmbeddedByValue()                       {}

// UnsafeParticipationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParticipationServer will
// result in compilation errors.
type UnsafeParticipationServer interface {
	mustEmbedUnimplementedParticipationServer()
}

func RegisterParticipationServer(s grpc.ServiceRegistrar, srv ParticipationServer) {
	// If the following call pancis, it indicates UnimplementedParticipationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Participation_ServiceDesc, srv)
}

func _Participation_ListParticipations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipationServer).ListParticipations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Participation_ListParticipations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipationServer).ListParticipations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Participation_CreateParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParticipationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipationServer).CreateParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Participation_CreateParticipation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipationServer).CreateParticipation(ctx, req.(*CreateParticipationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Participation_DeleteParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParticipationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipationServer).DeleteParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Participation_DeleteParticipation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipationServer).DeleteParticipation(ctx, req.(*DeleteParticipationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Participation_ServiceDesc is the grpc.ServiceDesc for Participation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Participation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "songcontestrater.Participation",
	HandlerType: (*ParticipationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListParticipations",
			Handler:    _Participation_ListParticipations_Handler,
		},
		{
			MethodName: "CreateParticipation",
			Handler:    _Participation_CreateParticipation_Handler,
		},
		{
			MethodName: "DeleteParticipation",
			Handler:    _Participation_DeleteParticipation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "participation_service.proto",
}
