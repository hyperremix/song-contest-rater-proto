// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: competition.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ActResponse } from "./act";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "songcontestrater";

export enum Heat {
  HEAT_UNSPECIFIED = 0,
  HEAT_SEMI_FINAL = 1,
  HEAT_FINAL = 2,
  HEAT_1 = 3,
  HEAT_2 = 4,
  HEAT_3 = 5,
  HEAT_4 = 6,
  HEAT_5 = 7,
  HEAT_FINAL_QUALIFIER = 8,
}

export function heatFromJSON(object: any): Heat {
  switch (object) {
    case 0:
    case "HEAT_UNSPECIFIED":
      return Heat.HEAT_UNSPECIFIED;
    case 1:
    case "HEAT_SEMI_FINAL":
      return Heat.HEAT_SEMI_FINAL;
    case 2:
    case "HEAT_FINAL":
      return Heat.HEAT_FINAL;
    case 3:
    case "HEAT_1":
      return Heat.HEAT_1;
    case 4:
    case "HEAT_2":
      return Heat.HEAT_2;
    case 5:
    case "HEAT_3":
      return Heat.HEAT_3;
    case 6:
    case "HEAT_4":
      return Heat.HEAT_4;
    case 7:
    case "HEAT_5":
      return Heat.HEAT_5;
    case 8:
    case "HEAT_FINAL_QUALIFIER":
      return Heat.HEAT_FINAL_QUALIFIER;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Heat");
  }
}

export function heatToJSON(object: Heat): number {
  switch (object) {
    case Heat.HEAT_UNSPECIFIED:
      return 0;
    case Heat.HEAT_SEMI_FINAL:
      return 1;
    case Heat.HEAT_FINAL:
      return 2;
    case Heat.HEAT_1:
      return 3;
    case Heat.HEAT_2:
      return 4;
    case Heat.HEAT_3:
      return 5;
    case Heat.HEAT_4:
      return 6;
    case Heat.HEAT_5:
      return 7;
    case Heat.HEAT_FINAL_QUALIFIER:
      return 8;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Heat");
  }
}

export interface GetCompetitionRequest {
  id: string;
}

export interface CreateCompetitionRequest {
  heat: Heat;
  city: string;
  country: string;
  start_time: Timestamp | undefined;
  image_url: string;
}

export interface UpdateCompetitionRequest {
  id: string;
  heat: Heat;
  city: string;
  country: string;
  start_time: Timestamp | undefined;
  image_url: string;
}

export interface DeleteCompetitionRequest {
  id: string;
}

export interface CompetitionResponse {
  id: string;
  heat: Heat;
  city: string;
  country: string;
  start_time: Timestamp | undefined;
  image_url: string;
  acts: ActResponse[];
  created_at: Timestamp | undefined;
  updated_at: Timestamp | undefined;
}

export interface ListCompetitionsResponse {
  competitions: CompetitionResponse[];
}

function createBaseGetCompetitionRequest(): GetCompetitionRequest {
  return { id: "" };
}

export const GetCompetitionRequest: MessageFns<GetCompetitionRequest> = {
  encode(message: GetCompetitionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCompetitionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCompetitionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCompetitionRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetCompetitionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCompetitionRequest>, I>>(base?: I): GetCompetitionRequest {
    return GetCompetitionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCompetitionRequest>, I>>(object: I): GetCompetitionRequest {
    const message = createBaseGetCompetitionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCreateCompetitionRequest(): CreateCompetitionRequest {
  return { heat: 0, city: "", country: "", start_time: undefined, image_url: "" };
}

export const CreateCompetitionRequest: MessageFns<CreateCompetitionRequest> = {
  encode(message: CreateCompetitionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.heat !== 0) {
      writer.uint32(8).int32(message.heat);
    }
    if (message.city !== "") {
      writer.uint32(18).string(message.city);
    }
    if (message.country !== "") {
      writer.uint32(26).string(message.country);
    }
    if (message.start_time !== undefined) {
      Timestamp.encode(message.start_time, writer.uint32(34).fork()).join();
    }
    if (message.image_url !== "") {
      writer.uint32(42).string(message.image_url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCompetitionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCompetitionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.heat = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.start_time = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.image_url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCompetitionRequest {
    return {
      heat: isSet(object.heat) ? heatFromJSON(object.heat) : 0,
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      start_time: isSet(object.start_time) ? fromJsonTimestamp(object.start_time) : undefined,
      image_url: isSet(object.image_url) ? globalThis.String(object.image_url) : "",
    };
  },

  toJSON(message: CreateCompetitionRequest): unknown {
    const obj: any = {};
    if (message.heat !== 0) {
      obj.heat = heatToJSON(message.heat);
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.start_time !== undefined) {
      obj.start_time = fromTimestamp(message.start_time).toISOString();
    }
    if (message.image_url !== "") {
      obj.image_url = message.image_url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCompetitionRequest>, I>>(base?: I): CreateCompetitionRequest {
    return CreateCompetitionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCompetitionRequest>, I>>(object: I): CreateCompetitionRequest {
    const message = createBaseCreateCompetitionRequest();
    message.heat = object.heat ?? 0;
    message.city = object.city ?? "";
    message.country = object.country ?? "";
    message.start_time = (object.start_time !== undefined && object.start_time !== null)
      ? Timestamp.fromPartial(object.start_time)
      : undefined;
    message.image_url = object.image_url ?? "";
    return message;
  },
};

function createBaseUpdateCompetitionRequest(): UpdateCompetitionRequest {
  return { id: "", heat: 0, city: "", country: "", start_time: undefined, image_url: "" };
}

export const UpdateCompetitionRequest: MessageFns<UpdateCompetitionRequest> = {
  encode(message: UpdateCompetitionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.heat !== 0) {
      writer.uint32(16).int32(message.heat);
    }
    if (message.city !== "") {
      writer.uint32(26).string(message.city);
    }
    if (message.country !== "") {
      writer.uint32(34).string(message.country);
    }
    if (message.start_time !== undefined) {
      Timestamp.encode(message.start_time, writer.uint32(42).fork()).join();
    }
    if (message.image_url !== "") {
      writer.uint32(50).string(message.image_url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCompetitionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCompetitionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.heat = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.start_time = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.image_url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCompetitionRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      heat: isSet(object.heat) ? heatFromJSON(object.heat) : 0,
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      start_time: isSet(object.start_time) ? fromJsonTimestamp(object.start_time) : undefined,
      image_url: isSet(object.image_url) ? globalThis.String(object.image_url) : "",
    };
  },

  toJSON(message: UpdateCompetitionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.heat !== 0) {
      obj.heat = heatToJSON(message.heat);
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.start_time !== undefined) {
      obj.start_time = fromTimestamp(message.start_time).toISOString();
    }
    if (message.image_url !== "") {
      obj.image_url = message.image_url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCompetitionRequest>, I>>(base?: I): UpdateCompetitionRequest {
    return UpdateCompetitionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCompetitionRequest>, I>>(object: I): UpdateCompetitionRequest {
    const message = createBaseUpdateCompetitionRequest();
    message.id = object.id ?? "";
    message.heat = object.heat ?? 0;
    message.city = object.city ?? "";
    message.country = object.country ?? "";
    message.start_time = (object.start_time !== undefined && object.start_time !== null)
      ? Timestamp.fromPartial(object.start_time)
      : undefined;
    message.image_url = object.image_url ?? "";
    return message;
  },
};

function createBaseDeleteCompetitionRequest(): DeleteCompetitionRequest {
  return { id: "" };
}

export const DeleteCompetitionRequest: MessageFns<DeleteCompetitionRequest> = {
  encode(message: DeleteCompetitionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCompetitionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCompetitionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCompetitionRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteCompetitionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCompetitionRequest>, I>>(base?: I): DeleteCompetitionRequest {
    return DeleteCompetitionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCompetitionRequest>, I>>(object: I): DeleteCompetitionRequest {
    const message = createBaseDeleteCompetitionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCompetitionResponse(): CompetitionResponse {
  return {
    id: "",
    heat: 0,
    city: "",
    country: "",
    start_time: undefined,
    image_url: "",
    acts: [],
    created_at: undefined,
    updated_at: undefined,
  };
}

export const CompetitionResponse: MessageFns<CompetitionResponse> = {
  encode(message: CompetitionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.heat !== 0) {
      writer.uint32(16).int32(message.heat);
    }
    if (message.city !== "") {
      writer.uint32(26).string(message.city);
    }
    if (message.country !== "") {
      writer.uint32(34).string(message.country);
    }
    if (message.start_time !== undefined) {
      Timestamp.encode(message.start_time, writer.uint32(42).fork()).join();
    }
    if (message.image_url !== "") {
      writer.uint32(50).string(message.image_url);
    }
    for (const v of message.acts) {
      ActResponse.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.created_at !== undefined) {
      Timestamp.encode(message.created_at, writer.uint32(66).fork()).join();
    }
    if (message.updated_at !== undefined) {
      Timestamp.encode(message.updated_at, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompetitionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompetitionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.heat = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.start_time = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.image_url = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.acts.push(ActResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.created_at = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updated_at = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompetitionResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      heat: isSet(object.heat) ? heatFromJSON(object.heat) : 0,
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      start_time: isSet(object.start_time) ? fromJsonTimestamp(object.start_time) : undefined,
      image_url: isSet(object.image_url) ? globalThis.String(object.image_url) : "",
      acts: globalThis.Array.isArray(object?.acts) ? object.acts.map((e: any) => ActResponse.fromJSON(e)) : [],
      created_at: isSet(object.created_at) ? fromJsonTimestamp(object.created_at) : undefined,
      updated_at: isSet(object.updated_at) ? fromJsonTimestamp(object.updated_at) : undefined,
    };
  },

  toJSON(message: CompetitionResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.heat !== 0) {
      obj.heat = heatToJSON(message.heat);
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.start_time !== undefined) {
      obj.start_time = fromTimestamp(message.start_time).toISOString();
    }
    if (message.image_url !== "") {
      obj.image_url = message.image_url;
    }
    if (message.acts?.length) {
      obj.acts = message.acts.map((e) => ActResponse.toJSON(e));
    }
    if (message.created_at !== undefined) {
      obj.created_at = fromTimestamp(message.created_at).toISOString();
    }
    if (message.updated_at !== undefined) {
      obj.updated_at = fromTimestamp(message.updated_at).toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompetitionResponse>, I>>(base?: I): CompetitionResponse {
    return CompetitionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompetitionResponse>, I>>(object: I): CompetitionResponse {
    const message = createBaseCompetitionResponse();
    message.id = object.id ?? "";
    message.heat = object.heat ?? 0;
    message.city = object.city ?? "";
    message.country = object.country ?? "";
    message.start_time = (object.start_time !== undefined && object.start_time !== null)
      ? Timestamp.fromPartial(object.start_time)
      : undefined;
    message.image_url = object.image_url ?? "";
    message.acts = object.acts?.map((e) => ActResponse.fromPartial(e)) || [];
    message.created_at = (object.created_at !== undefined && object.created_at !== null)
      ? Timestamp.fromPartial(object.created_at)
      : undefined;
    message.updated_at = (object.updated_at !== undefined && object.updated_at !== null)
      ? Timestamp.fromPartial(object.updated_at)
      : undefined;
    return message;
  },
};

function createBaseListCompetitionsResponse(): ListCompetitionsResponse {
  return { competitions: [] };
}

export const ListCompetitionsResponse: MessageFns<ListCompetitionsResponse> = {
  encode(message: ListCompetitionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.competitions) {
      CompetitionResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCompetitionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCompetitionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.competitions.push(CompetitionResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCompetitionsResponse {
    return {
      competitions: globalThis.Array.isArray(object?.competitions)
        ? object.competitions.map((e: any) => CompetitionResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListCompetitionsResponse): unknown {
    const obj: any = {};
    if (message.competitions?.length) {
      obj.competitions = message.competitions.map((e) => CompetitionResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCompetitionsResponse>, I>>(base?: I): ListCompetitionsResponse {
    return ListCompetitionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCompetitionsResponse>, I>>(object: I): ListCompetitionsResponse {
    const message = createBaseListCompetitionsResponse();
    message.competitions = object.competitions?.map((e) => CompetitionResponse.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Timestamp {
  if (o instanceof globalThis.Date) {
    return toTimestamp(o);
  } else if (typeof o === "string") {
    return toTimestamp(new globalThis.Date(o));
  } else {
    return Timestamp.fromJSON(o);
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
