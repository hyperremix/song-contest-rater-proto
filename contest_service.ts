// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: contest_service.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import {
  ContestResponse,
  CreateContestRequest,
  DeleteContestRequest,
  GetContestRequest,
  ListContestsResponse,
  UpdateContestRequest,
} from "./contest";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "songcontestrater";

export interface Contest {
  ListContests(request: Empty): Promise<ListContestsResponse>;
  GetContest(request: GetContestRequest): Promise<ContestResponse>;
  CreateContest(request: CreateContestRequest): Promise<ContestResponse>;
  UpdateContest(request: UpdateContestRequest): Promise<ContestResponse>;
  DeleteContest(request: DeleteContestRequest): Promise<ContestResponse>;
}

export const ContestServiceName = "songcontestrater.Contest";
export class ContestClientImpl implements Contest {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ContestServiceName;
    this.rpc = rpc;
    this.ListContests = this.ListContests.bind(this);
    this.GetContest = this.GetContest.bind(this);
    this.CreateContest = this.CreateContest.bind(this);
    this.UpdateContest = this.UpdateContest.bind(this);
    this.DeleteContest = this.DeleteContest.bind(this);
  }
  ListContests(request: Empty): Promise<ListContestsResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListContests", data);
    return promise.then((data) => ListContestsResponse.decode(new BinaryReader(data)));
  }

  GetContest(request: GetContestRequest): Promise<ContestResponse> {
    const data = GetContestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetContest", data);
    return promise.then((data) => ContestResponse.decode(new BinaryReader(data)));
  }

  CreateContest(request: CreateContestRequest): Promise<ContestResponse> {
    const data = CreateContestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateContest", data);
    return promise.then((data) => ContestResponse.decode(new BinaryReader(data)));
  }

  UpdateContest(request: UpdateContestRequest): Promise<ContestResponse> {
    const data = UpdateContestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateContest", data);
    return promise.then((data) => ContestResponse.decode(new BinaryReader(data)));
  }

  DeleteContest(request: DeleteContestRequest): Promise<ContestResponse> {
    const data = DeleteContestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteContest", data);
    return promise.then((data) => ContestResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
