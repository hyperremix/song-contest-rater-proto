// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: user_service.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import { Empty } from "./google/protobuf/empty";
import {
  CreateUserRequest,
  DeleteUserRequest,
  GetUserRequest,
  ListUsersResponse,
  UpdateUserRequest,
  UserResponse,
} from "./user";

export const protobufPackage = "songcontestrater";

export interface User {
  ListUsers(request: Empty): Promise<ListUsersResponse>;
  GetUser(request: GetUserRequest): Promise<UserResponse>;
  CreateUser(request: CreateUserRequest): Promise<UserResponse>;
  UpdateUser(request: UpdateUserRequest): Promise<UserResponse>;
  DeleteUser(request: DeleteUserRequest): Promise<UserResponse>;
}

export const UserServiceName = "songcontestrater.User";
export class UserClientImpl implements User {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UserServiceName;
    this.rpc = rpc;
    this.ListUsers = this.ListUsers.bind(this);
    this.GetUser = this.GetUser.bind(this);
    this.CreateUser = this.CreateUser.bind(this);
    this.UpdateUser = this.UpdateUser.bind(this);
    this.DeleteUser = this.DeleteUser.bind(this);
  }
  ListUsers(request: Empty): Promise<ListUsersResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListUsers", data);
    return promise.then((data) => ListUsersResponse.decode(new BinaryReader(data)));
  }

  GetUser(request: GetUserRequest): Promise<UserResponse> {
    const data = GetUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUser", data);
    return promise.then((data) => UserResponse.decode(new BinaryReader(data)));
  }

  CreateUser(request: CreateUserRequest): Promise<UserResponse> {
    const data = CreateUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateUser", data);
    return promise.then((data) => UserResponse.decode(new BinaryReader(data)));
  }

  UpdateUser(request: UpdateUserRequest): Promise<UserResponse> {
    const data = UpdateUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUser", data);
    return promise.then((data) => UserResponse.decode(new BinaryReader(data)));
  }

  DeleteUser(request: DeleteUserRequest): Promise<UserResponse> {
    const data = DeleteUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUser", data);
    return promise.then((data) => UserResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
