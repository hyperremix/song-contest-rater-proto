// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: act_service.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import {
  ActResponse,
  CreateActRequest,
  DeleteActRequest,
  GetActRequest,
  ListActsResponse,
  UpdateActRequest,
} from "./act";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "songcontestrater";

export interface Act {
  ListActs(request: Empty): Promise<ListActsResponse>;
  GetAct(request: GetActRequest): Promise<ActResponse>;
  CreateAct(request: CreateActRequest): Promise<ActResponse>;
  UpdateAct(request: UpdateActRequest): Promise<ActResponse>;
  DeleteAct(request: DeleteActRequest): Promise<ActResponse>;
}

export const ActServiceName = "songcontestrater.Act";
export class ActClientImpl implements Act {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ActServiceName;
    this.rpc = rpc;
    this.ListActs = this.ListActs.bind(this);
    this.GetAct = this.GetAct.bind(this);
    this.CreateAct = this.CreateAct.bind(this);
    this.UpdateAct = this.UpdateAct.bind(this);
    this.DeleteAct = this.DeleteAct.bind(this);
  }
  ListActs(request: Empty): Promise<ListActsResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListActs", data);
    return promise.then((data) => ListActsResponse.decode(new BinaryReader(data)));
  }

  GetAct(request: GetActRequest): Promise<ActResponse> {
    const data = GetActRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAct", data);
    return promise.then((data) => ActResponse.decode(new BinaryReader(data)));
  }

  CreateAct(request: CreateActRequest): Promise<ActResponse> {
    const data = CreateActRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateAct", data);
    return promise.then((data) => ActResponse.decode(new BinaryReader(data)));
  }

  UpdateAct(request: UpdateActRequest): Promise<ActResponse> {
    const data = UpdateActRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateAct", data);
    return promise.then((data) => ActResponse.decode(new BinaryReader(data)));
  }

  DeleteAct(request: DeleteActRequest): Promise<ActResponse> {
    const data = DeleteActRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteAct", data);
    return promise.then((data) => ActResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
