// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: competition_service.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import {
  CompetitionResponse,
  CreateCompetitionRequest,
  DeleteCompetitionRequest,
  GetCompetitionRequest,
  ListCompetitionsResponse,
  UpdateCompetitionRequest,
} from "./competition";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "songcontestrater";

export interface Competition {
  ListCompetitions(request: Empty): Promise<ListCompetitionsResponse>;
  GetCompetition(request: GetCompetitionRequest): Promise<CompetitionResponse>;
  CreateCompetition(request: CreateCompetitionRequest): Promise<CompetitionResponse>;
  UpdateCompetition(request: UpdateCompetitionRequest): Promise<CompetitionResponse>;
  DeleteCompetition(request: DeleteCompetitionRequest): Promise<CompetitionResponse>;
}

export const CompetitionServiceName = "songcontestrater.Competition";
export class CompetitionClientImpl implements Competition {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CompetitionServiceName;
    this.rpc = rpc;
    this.ListCompetitions = this.ListCompetitions.bind(this);
    this.GetCompetition = this.GetCompetition.bind(this);
    this.CreateCompetition = this.CreateCompetition.bind(this);
    this.UpdateCompetition = this.UpdateCompetition.bind(this);
    this.DeleteCompetition = this.DeleteCompetition.bind(this);
  }
  ListCompetitions(request: Empty): Promise<ListCompetitionsResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListCompetitions", data);
    return promise.then((data) => ListCompetitionsResponse.decode(new BinaryReader(data)));
  }

  GetCompetition(request: GetCompetitionRequest): Promise<CompetitionResponse> {
    const data = GetCompetitionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCompetition", data);
    return promise.then((data) => CompetitionResponse.decode(new BinaryReader(data)));
  }

  CreateCompetition(request: CreateCompetitionRequest): Promise<CompetitionResponse> {
    const data = CreateCompetitionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateCompetition", data);
    return promise.then((data) => CompetitionResponse.decode(new BinaryReader(data)));
  }

  UpdateCompetition(request: UpdateCompetitionRequest): Promise<CompetitionResponse> {
    const data = UpdateCompetitionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateCompetition", data);
    return promise.then((data) => CompetitionResponse.decode(new BinaryReader(data)));
  }

  DeleteCompetition(request: DeleteCompetitionRequest): Promise<CompetitionResponse> {
    const data = DeleteCompetitionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteCompetition", data);
    return promise.then((data) => CompetitionResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
