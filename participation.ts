// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: participation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "songcontestrater";

export interface ParticipationResponse {
  competition_id: string;
  act_id: string;
  order: number;
}

export interface ListParticipationsResponse {
  participations: ParticipationResponse[];
}

export interface CreateParticipationRequest {
  competition_id: string;
  act_id: string;
  order: number;
}

export interface DeleteParticipationRequest {
  competition_id: string;
  act_id: string;
}

function createBaseParticipationResponse(): ParticipationResponse {
  return { competition_id: "", act_id: "", order: 0 };
}

export const ParticipationResponse: MessageFns<ParticipationResponse> = {
  encode(message: ParticipationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.competition_id !== "") {
      writer.uint32(10).string(message.competition_id);
    }
    if (message.act_id !== "") {
      writer.uint32(18).string(message.act_id);
    }
    if (message.order !== 0) {
      writer.uint32(24).int32(message.order);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.competition_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.act_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipationResponse {
    return {
      competition_id: isSet(object.competition_id) ? globalThis.String(object.competition_id) : "",
      act_id: isSet(object.act_id) ? globalThis.String(object.act_id) : "",
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
    };
  },

  toJSON(message: ParticipationResponse): unknown {
    const obj: any = {};
    if (message.competition_id !== "") {
      obj.competition_id = message.competition_id;
    }
    if (message.act_id !== "") {
      obj.act_id = message.act_id;
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParticipationResponse>, I>>(base?: I): ParticipationResponse {
    return ParticipationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParticipationResponse>, I>>(object: I): ParticipationResponse {
    const message = createBaseParticipationResponse();
    message.competition_id = object.competition_id ?? "";
    message.act_id = object.act_id ?? "";
    message.order = object.order ?? 0;
    return message;
  },
};

function createBaseListParticipationsResponse(): ListParticipationsResponse {
  return { participations: [] };
}

export const ListParticipationsResponse: MessageFns<ListParticipationsResponse> = {
  encode(message: ListParticipationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.participations) {
      ParticipationResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListParticipationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListParticipationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.participations.push(ParticipationResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListParticipationsResponse {
    return {
      participations: globalThis.Array.isArray(object?.participations)
        ? object.participations.map((e: any) => ParticipationResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListParticipationsResponse): unknown {
    const obj: any = {};
    if (message.participations?.length) {
      obj.participations = message.participations.map((e) => ParticipationResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListParticipationsResponse>, I>>(base?: I): ListParticipationsResponse {
    return ListParticipationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListParticipationsResponse>, I>>(object: I): ListParticipationsResponse {
    const message = createBaseListParticipationsResponse();
    message.participations = object.participations?.map((e) => ParticipationResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateParticipationRequest(): CreateParticipationRequest {
  return { competition_id: "", act_id: "", order: 0 };
}

export const CreateParticipationRequest: MessageFns<CreateParticipationRequest> = {
  encode(message: CreateParticipationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.competition_id !== "") {
      writer.uint32(10).string(message.competition_id);
    }
    if (message.act_id !== "") {
      writer.uint32(18).string(message.act_id);
    }
    if (message.order !== 0) {
      writer.uint32(24).int32(message.order);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateParticipationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateParticipationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.competition_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.act_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateParticipationRequest {
    return {
      competition_id: isSet(object.competition_id) ? globalThis.String(object.competition_id) : "",
      act_id: isSet(object.act_id) ? globalThis.String(object.act_id) : "",
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
    };
  },

  toJSON(message: CreateParticipationRequest): unknown {
    const obj: any = {};
    if (message.competition_id !== "") {
      obj.competition_id = message.competition_id;
    }
    if (message.act_id !== "") {
      obj.act_id = message.act_id;
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateParticipationRequest>, I>>(base?: I): CreateParticipationRequest {
    return CreateParticipationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateParticipationRequest>, I>>(object: I): CreateParticipationRequest {
    const message = createBaseCreateParticipationRequest();
    message.competition_id = object.competition_id ?? "";
    message.act_id = object.act_id ?? "";
    message.order = object.order ?? 0;
    return message;
  },
};

function createBaseDeleteParticipationRequest(): DeleteParticipationRequest {
  return { competition_id: "", act_id: "" };
}

export const DeleteParticipationRequest: MessageFns<DeleteParticipationRequest> = {
  encode(message: DeleteParticipationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.competition_id !== "") {
      writer.uint32(10).string(message.competition_id);
    }
    if (message.act_id !== "") {
      writer.uint32(18).string(message.act_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteParticipationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteParticipationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.competition_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.act_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteParticipationRequest {
    return {
      competition_id: isSet(object.competition_id) ? globalThis.String(object.competition_id) : "",
      act_id: isSet(object.act_id) ? globalThis.String(object.act_id) : "",
    };
  },

  toJSON(message: DeleteParticipationRequest): unknown {
    const obj: any = {};
    if (message.competition_id !== "") {
      obj.competition_id = message.competition_id;
    }
    if (message.act_id !== "") {
      obj.act_id = message.act_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteParticipationRequest>, I>>(base?: I): DeleteParticipationRequest {
    return DeleteParticipationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteParticipationRequest>, I>>(object: I): DeleteParticipationRequest {
    const message = createBaseDeleteParticipationRequest();
    message.competition_id = object.competition_id ?? "";
    message.act_id = object.act_id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
