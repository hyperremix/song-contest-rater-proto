// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: act.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";
import { RatingResponse } from "./rating";

export const protobufPackage = "songcontestrater";

export interface ListCompetitionActsRequest {
  competition_id: string;
}

export interface GetActRequest {
  id: string;
}

export interface CreateActRequest {
  artist_name: string;
  song_name: string;
  image_url: string;
}

export interface UpdateActRequest {
  id: string;
  artist_name: string;
  song_name: string;
  image_url: string;
}

export interface DeleteActRequest {
  id: string;
}

export interface ActResponse {
  id: string;
  artist_name: string;
  song_name: string;
  image_url: string;
  order: number;
  ratings: RatingResponse[];
  created_at: Timestamp | undefined;
  updated_at: Timestamp | undefined;
}

export interface ListActsResponse {
  acts: ActResponse[];
}

function createBaseListCompetitionActsRequest(): ListCompetitionActsRequest {
  return { competition_id: "" };
}

export const ListCompetitionActsRequest: MessageFns<ListCompetitionActsRequest> = {
  encode(message: ListCompetitionActsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.competition_id !== "") {
      writer.uint32(10).string(message.competition_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCompetitionActsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCompetitionActsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.competition_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCompetitionActsRequest {
    return { competition_id: isSet(object.competition_id) ? globalThis.String(object.competition_id) : "" };
  },

  toJSON(message: ListCompetitionActsRequest): unknown {
    const obj: any = {};
    if (message.competition_id !== "") {
      obj.competition_id = message.competition_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCompetitionActsRequest>, I>>(base?: I): ListCompetitionActsRequest {
    return ListCompetitionActsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCompetitionActsRequest>, I>>(object: I): ListCompetitionActsRequest {
    const message = createBaseListCompetitionActsRequest();
    message.competition_id = object.competition_id ?? "";
    return message;
  },
};

function createBaseGetActRequest(): GetActRequest {
  return { id: "" };
}

export const GetActRequest: MessageFns<GetActRequest> = {
  encode(message: GetActRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetActRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetActRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetActRequest>, I>>(base?: I): GetActRequest {
    return GetActRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetActRequest>, I>>(object: I): GetActRequest {
    const message = createBaseGetActRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCreateActRequest(): CreateActRequest {
  return { artist_name: "", song_name: "", image_url: "" };
}

export const CreateActRequest: MessageFns<CreateActRequest> = {
  encode(message: CreateActRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.artist_name !== "") {
      writer.uint32(10).string(message.artist_name);
    }
    if (message.song_name !== "") {
      writer.uint32(18).string(message.song_name);
    }
    if (message.image_url !== "") {
      writer.uint32(26).string(message.image_url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateActRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateActRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.artist_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.song_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image_url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateActRequest {
    return {
      artist_name: isSet(object.artist_name) ? globalThis.String(object.artist_name) : "",
      song_name: isSet(object.song_name) ? globalThis.String(object.song_name) : "",
      image_url: isSet(object.image_url) ? globalThis.String(object.image_url) : "",
    };
  },

  toJSON(message: CreateActRequest): unknown {
    const obj: any = {};
    if (message.artist_name !== "") {
      obj.artist_name = message.artist_name;
    }
    if (message.song_name !== "") {
      obj.song_name = message.song_name;
    }
    if (message.image_url !== "") {
      obj.image_url = message.image_url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateActRequest>, I>>(base?: I): CreateActRequest {
    return CreateActRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateActRequest>, I>>(object: I): CreateActRequest {
    const message = createBaseCreateActRequest();
    message.artist_name = object.artist_name ?? "";
    message.song_name = object.song_name ?? "";
    message.image_url = object.image_url ?? "";
    return message;
  },
};

function createBaseUpdateActRequest(): UpdateActRequest {
  return { id: "", artist_name: "", song_name: "", image_url: "" };
}

export const UpdateActRequest: MessageFns<UpdateActRequest> = {
  encode(message: UpdateActRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.artist_name !== "") {
      writer.uint32(18).string(message.artist_name);
    }
    if (message.song_name !== "") {
      writer.uint32(26).string(message.song_name);
    }
    if (message.image_url !== "") {
      writer.uint32(34).string(message.image_url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateActRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateActRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.artist_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.song_name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image_url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateActRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      artist_name: isSet(object.artist_name) ? globalThis.String(object.artist_name) : "",
      song_name: isSet(object.song_name) ? globalThis.String(object.song_name) : "",
      image_url: isSet(object.image_url) ? globalThis.String(object.image_url) : "",
    };
  },

  toJSON(message: UpdateActRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.artist_name !== "") {
      obj.artist_name = message.artist_name;
    }
    if (message.song_name !== "") {
      obj.song_name = message.song_name;
    }
    if (message.image_url !== "") {
      obj.image_url = message.image_url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateActRequest>, I>>(base?: I): UpdateActRequest {
    return UpdateActRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateActRequest>, I>>(object: I): UpdateActRequest {
    const message = createBaseUpdateActRequest();
    message.id = object.id ?? "";
    message.artist_name = object.artist_name ?? "";
    message.song_name = object.song_name ?? "";
    message.image_url = object.image_url ?? "";
    return message;
  },
};

function createBaseDeleteActRequest(): DeleteActRequest {
  return { id: "" };
}

export const DeleteActRequest: MessageFns<DeleteActRequest> = {
  encode(message: DeleteActRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteActRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteActRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteActRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteActRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteActRequest>, I>>(base?: I): DeleteActRequest {
    return DeleteActRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteActRequest>, I>>(object: I): DeleteActRequest {
    const message = createBaseDeleteActRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseActResponse(): ActResponse {
  return {
    id: "",
    artist_name: "",
    song_name: "",
    image_url: "",
    order: 0,
    ratings: [],
    created_at: undefined,
    updated_at: undefined,
  };
}

export const ActResponse: MessageFns<ActResponse> = {
  encode(message: ActResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.artist_name !== "") {
      writer.uint32(18).string(message.artist_name);
    }
    if (message.song_name !== "") {
      writer.uint32(26).string(message.song_name);
    }
    if (message.image_url !== "") {
      writer.uint32(34).string(message.image_url);
    }
    if (message.order !== 0) {
      writer.uint32(40).int32(message.order);
    }
    for (const v of message.ratings) {
      RatingResponse.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.created_at !== undefined) {
      Timestamp.encode(message.created_at, writer.uint32(58).fork()).join();
    }
    if (message.updated_at !== undefined) {
      Timestamp.encode(message.updated_at, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.artist_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.song_name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image_url = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.ratings.push(RatingResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.created_at = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updated_at = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      artist_name: isSet(object.artist_name) ? globalThis.String(object.artist_name) : "",
      song_name: isSet(object.song_name) ? globalThis.String(object.song_name) : "",
      image_url: isSet(object.image_url) ? globalThis.String(object.image_url) : "",
      order: isSet(object.order) ? globalThis.Number(object.order) : 0,
      ratings: globalThis.Array.isArray(object?.ratings)
        ? object.ratings.map((e: any) => RatingResponse.fromJSON(e))
        : [],
      created_at: isSet(object.created_at) ? fromJsonTimestamp(object.created_at) : undefined,
      updated_at: isSet(object.updated_at) ? fromJsonTimestamp(object.updated_at) : undefined,
    };
  },

  toJSON(message: ActResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.artist_name !== "") {
      obj.artist_name = message.artist_name;
    }
    if (message.song_name !== "") {
      obj.song_name = message.song_name;
    }
    if (message.image_url !== "") {
      obj.image_url = message.image_url;
    }
    if (message.order !== 0) {
      obj.order = Math.round(message.order);
    }
    if (message.ratings?.length) {
      obj.ratings = message.ratings.map((e) => RatingResponse.toJSON(e));
    }
    if (message.created_at !== undefined) {
      obj.created_at = fromTimestamp(message.created_at).toISOString();
    }
    if (message.updated_at !== undefined) {
      obj.updated_at = fromTimestamp(message.updated_at).toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActResponse>, I>>(base?: I): ActResponse {
    return ActResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActResponse>, I>>(object: I): ActResponse {
    const message = createBaseActResponse();
    message.id = object.id ?? "";
    message.artist_name = object.artist_name ?? "";
    message.song_name = object.song_name ?? "";
    message.image_url = object.image_url ?? "";
    message.order = object.order ?? 0;
    message.ratings = object.ratings?.map((e) => RatingResponse.fromPartial(e)) || [];
    message.created_at = (object.created_at !== undefined && object.created_at !== null)
      ? Timestamp.fromPartial(object.created_at)
      : undefined;
    message.updated_at = (object.updated_at !== undefined && object.updated_at !== null)
      ? Timestamp.fromPartial(object.updated_at)
      : undefined;
    return message;
  },
};

function createBaseListActsResponse(): ListActsResponse {
  return { acts: [] };
}

export const ListActsResponse: MessageFns<ListActsResponse> = {
  encode(message: ListActsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.acts) {
      ActResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListActsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.acts.push(ActResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListActsResponse {
    return { acts: globalThis.Array.isArray(object?.acts) ? object.acts.map((e: any) => ActResponse.fromJSON(e)) : [] };
  },

  toJSON(message: ListActsResponse): unknown {
    const obj: any = {};
    if (message.acts?.length) {
      obj.acts = message.acts.map((e) => ActResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListActsResponse>, I>>(base?: I): ListActsResponse {
    return ListActsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListActsResponse>, I>>(object: I): ListActsResponse {
    const message = createBaseListActsResponse();
    message.acts = object.acts?.map((e) => ActResponse.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Timestamp {
  if (o instanceof globalThis.Date) {
    return toTimestamp(o);
  } else if (typeof o === "string") {
    return toTimestamp(new globalThis.Date(o));
  } else {
    return Timestamp.fromJSON(o);
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
