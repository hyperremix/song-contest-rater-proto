// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: act_service.proto

package song_contest_rater_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Act_ListActs_FullMethodName  = "/songcontestrater.Act/ListActs"
	Act_GetAct_FullMethodName    = "/songcontestrater.Act/GetAct"
	Act_CreateAct_FullMethodName = "/songcontestrater.Act/CreateAct"
	Act_UpdateAct_FullMethodName = "/songcontestrater.Act/UpdateAct"
	Act_DeleteAct_FullMethodName = "/songcontestrater.Act/DeleteAct"
)

// ActClient is the client API for Act service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActClient interface {
	ListActs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListActsResponse, error)
	GetAct(ctx context.Context, in *GetActRequest, opts ...grpc.CallOption) (*ActResponse, error)
	CreateAct(ctx context.Context, in *CreateActRequest, opts ...grpc.CallOption) (*ActResponse, error)
	UpdateAct(ctx context.Context, in *UpdateActRequest, opts ...grpc.CallOption) (*ActResponse, error)
	DeleteAct(ctx context.Context, in *DeleteActRequest, opts ...grpc.CallOption) (*ActResponse, error)
}

type actClient struct {
	cc grpc.ClientConnInterface
}

func NewActClient(cc grpc.ClientConnInterface) ActClient {
	return &actClient{cc}
}

func (c *actClient) ListActs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListActsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActsResponse)
	err := c.cc.Invoke(ctx, Act_ListActs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) GetAct(ctx context.Context, in *GetActRequest, opts ...grpc.CallOption) (*ActResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActResponse)
	err := c.cc.Invoke(ctx, Act_GetAct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) CreateAct(ctx context.Context, in *CreateActRequest, opts ...grpc.CallOption) (*ActResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActResponse)
	err := c.cc.Invoke(ctx, Act_CreateAct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) UpdateAct(ctx context.Context, in *UpdateActRequest, opts ...grpc.CallOption) (*ActResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActResponse)
	err := c.cc.Invoke(ctx, Act_UpdateAct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) DeleteAct(ctx context.Context, in *DeleteActRequest, opts ...grpc.CallOption) (*ActResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActResponse)
	err := c.cc.Invoke(ctx, Act_DeleteAct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActServer is the server API for Act service.
// All implementations must embed UnimplementedActServer
// for forward compatibility.
type ActServer interface {
	ListActs(context.Context, *emptypb.Empty) (*ListActsResponse, error)
	GetAct(context.Context, *GetActRequest) (*ActResponse, error)
	CreateAct(context.Context, *CreateActRequest) (*ActResponse, error)
	UpdateAct(context.Context, *UpdateActRequest) (*ActResponse, error)
	DeleteAct(context.Context, *DeleteActRequest) (*ActResponse, error)
	mustEmbedUnimplementedActServer()
}

// UnimplementedActServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActServer struct{}

func (UnimplementedActServer) ListActs(context.Context, *emptypb.Empty) (*ListActsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActs not implemented")
}
func (UnimplementedActServer) GetAct(context.Context, *GetActRequest) (*ActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAct not implemented")
}
func (UnimplementedActServer) CreateAct(context.Context, *CreateActRequest) (*ActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAct not implemented")
}
func (UnimplementedActServer) UpdateAct(context.Context, *UpdateActRequest) (*ActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAct not implemented")
}
func (UnimplementedActServer) DeleteAct(context.Context, *DeleteActRequest) (*ActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAct not implemented")
}
func (UnimplementedActServer) mustEmbedUnimplementedActServer() {}
func (UnimplementedActServer) testEmbeddedByValue()             {}

// UnsafeActServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActServer will
// result in compilation errors.
type UnsafeActServer interface {
	mustEmbedUnimplementedActServer()
}

func RegisterActServer(s grpc.ServiceRegistrar, srv ActServer) {
	// If the following call pancis, it indicates UnimplementedActServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Act_ServiceDesc, srv)
}

func _Act_ListActs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).ListActs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Act_ListActs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).ListActs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_GetAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).GetAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Act_GetAct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).GetAct(ctx, req.(*GetActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_CreateAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).CreateAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Act_CreateAct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).CreateAct(ctx, req.(*CreateActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_UpdateAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).UpdateAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Act_UpdateAct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).UpdateAct(ctx, req.(*UpdateActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_DeleteAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).DeleteAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Act_DeleteAct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).DeleteAct(ctx, req.(*DeleteActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Act_ServiceDesc is the grpc.ServiceDesc for Act service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Act_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "songcontestrater.Act",
	HandlerType: (*ActServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListActs",
			Handler:    _Act_ListActs_Handler,
		},
		{
			MethodName: "GetAct",
			Handler:    _Act_GetAct_Handler,
		},
		{
			MethodName: "CreateAct",
			Handler:    _Act_CreateAct_Handler,
		},
		{
			MethodName: "UpdateAct",
			Handler:    _Act_UpdateAct_Handler,
		},
		{
			MethodName: "DeleteAct",
			Handler:    _Act_DeleteAct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "act_service.proto",
}
