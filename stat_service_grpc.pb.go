// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: stat_service.proto

package songcontestraterprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Stat_ListUserStats_FullMethodName  = "/songcontestrater.Stat/ListUserStats"
	Stat_GetMyStats_FullMethodName     = "/songcontestrater.Stat/GetMyStats"
	Stat_GetGlobalStats_FullMethodName = "/songcontestrater.Stat/GetGlobalStats"
)

// StatClient is the client API for Stat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatClient interface {
	ListUserStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserStatsResponse, error)
	GetMyStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserStatsResponse, error)
	GetGlobalStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GlobalStatsResponse, error)
}

type statClient struct {
	cc grpc.ClientConnInterface
}

func NewStatClient(cc grpc.ClientConnInterface) StatClient {
	return &statClient{cc}
}

func (c *statClient) ListUserStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserStatsResponse)
	err := c.cc.Invoke(ctx, Stat_ListUserStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statClient) GetMyStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStatsResponse)
	err := c.cc.Invoke(ctx, Stat_GetMyStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statClient) GetGlobalStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GlobalStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalStatsResponse)
	err := c.cc.Invoke(ctx, Stat_GetGlobalStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatServer is the server API for Stat service.
// All implementations must embed UnimplementedStatServer
// for forward compatibility.
type StatServer interface {
	ListUserStats(context.Context, *emptypb.Empty) (*ListUserStatsResponse, error)
	GetMyStats(context.Context, *emptypb.Empty) (*UserStatsResponse, error)
	GetGlobalStats(context.Context, *emptypb.Empty) (*GlobalStatsResponse, error)
	mustEmbedUnimplementedStatServer()
}

// UnimplementedStatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatServer struct{}

func (UnimplementedStatServer) ListUserStats(context.Context, *emptypb.Empty) (*ListUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserStats not implemented")
}
func (UnimplementedStatServer) GetMyStats(context.Context, *emptypb.Empty) (*UserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyStats not implemented")
}
func (UnimplementedStatServer) GetGlobalStats(context.Context, *emptypb.Empty) (*GlobalStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalStats not implemented")
}
func (UnimplementedStatServer) mustEmbedUnimplementedStatServer() {}
func (UnimplementedStatServer) testEmbeddedByValue()              {}

// UnsafeStatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatServer will
// result in compilation errors.
type UnsafeStatServer interface {
	mustEmbedUnimplementedStatServer()
}

func RegisterStatServer(s grpc.ServiceRegistrar, srv StatServer) {
	// If the following call pancis, it indicates UnimplementedStatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Stat_ServiceDesc, srv)
}

func _Stat_ListUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).ListUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stat_ListUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).ListUserStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stat_GetMyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).GetMyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stat_GetMyStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).GetMyStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stat_GetGlobalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).GetGlobalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stat_GetGlobalStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).GetGlobalStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Stat_ServiceDesc is the grpc.ServiceDesc for Stat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "songcontestrater.Stat",
	HandlerType: (*StatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserStats",
			Handler:    _Stat_ListUserStats_Handler,
		},
		{
			MethodName: "GetMyStats",
			Handler:    _Stat_GetMyStats_Handler,
		},
		{
			MethodName: "GetGlobalStats",
			Handler:    _Stat_GetGlobalStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stat_service.proto",
}
