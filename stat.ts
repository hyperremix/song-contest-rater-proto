// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: stat.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";
import { UserResponse } from "./user";

export const protobufPackage = "songcontestrater";

export enum CriticType {
  CRITIC_TYPE_UNSPECIFIED = 0,
  CRITIC_TYPE_HARSH = 1,
  CRITIC_TYPE_SLIGHTLY_CRITICAL = 2,
  CRITIC_TYPE_BALANCED = 3,
  CRITIC_TYPE_EASY_TO_PLEASE = 4,
  CRITIC_TYPE_GENEROUS = 5,
}

export function criticTypeFromJSON(object: any): CriticType {
  switch (object) {
    case 0:
    case "CRITIC_TYPE_UNSPECIFIED":
      return CriticType.CRITIC_TYPE_UNSPECIFIED;
    case 1:
    case "CRITIC_TYPE_HARSH":
      return CriticType.CRITIC_TYPE_HARSH;
    case 2:
    case "CRITIC_TYPE_SLIGHTLY_CRITICAL":
      return CriticType.CRITIC_TYPE_SLIGHTLY_CRITICAL;
    case 3:
    case "CRITIC_TYPE_BALANCED":
      return CriticType.CRITIC_TYPE_BALANCED;
    case 4:
    case "CRITIC_TYPE_EASY_TO_PLEASE":
      return CriticType.CRITIC_TYPE_EASY_TO_PLEASE;
    case 5:
    case "CRITIC_TYPE_GENEROUS":
      return CriticType.CRITIC_TYPE_GENEROUS;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CriticType");
  }
}

export function criticTypeToJSON(object: CriticType): number {
  switch (object) {
    case CriticType.CRITIC_TYPE_UNSPECIFIED:
      return 0;
    case CriticType.CRITIC_TYPE_HARSH:
      return 1;
    case CriticType.CRITIC_TYPE_SLIGHTLY_CRITICAL:
      return 2;
    case CriticType.CRITIC_TYPE_BALANCED:
      return 3;
    case CriticType.CRITIC_TYPE_EASY_TO_PLEASE:
      return 4;
    case CriticType.CRITIC_TYPE_GENEROUS:
      return 5;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CriticType");
  }
}

export interface ListUserStatsResponse {
  stats: UserStatsResponse[];
}

export interface UserStatsResponse {
  user_rating_avg: number;
  total_ratings: number;
  rating_bias: number;
  critic_type: CriticType;
  user: UserResponse | undefined;
  created_at: Timestamp | undefined;
  updated_at: Timestamp | undefined;
}

export interface GlobalStatsResponse {
  global_rating_avg: number;
  total_ratings: number;
  created_at: Timestamp | undefined;
  updated_at: Timestamp | undefined;
}

function createBaseListUserStatsResponse(): ListUserStatsResponse {
  return { stats: [] };
}

export const ListUserStatsResponse: MessageFns<ListUserStatsResponse> = {
  encode(message: ListUserStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.stats) {
      UserStatsResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUserStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stats.push(UserStatsResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserStatsResponse {
    return {
      stats: globalThis.Array.isArray(object?.stats) ? object.stats.map((e: any) => UserStatsResponse.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUserStatsResponse): unknown {
    const obj: any = {};
    if (message.stats?.length) {
      obj.stats = message.stats.map((e) => UserStatsResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserStatsResponse>, I>>(base?: I): ListUserStatsResponse {
    return ListUserStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserStatsResponse>, I>>(object: I): ListUserStatsResponse {
    const message = createBaseListUserStatsResponse();
    message.stats = object.stats?.map((e) => UserStatsResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserStatsResponse(): UserStatsResponse {
  return {
    user_rating_avg: 0,
    total_ratings: 0,
    rating_bias: 0,
    critic_type: 0,
    user: undefined,
    created_at: undefined,
    updated_at: undefined,
  };
}

export const UserStatsResponse: MessageFns<UserStatsResponse> = {
  encode(message: UserStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user_rating_avg !== 0) {
      writer.uint32(9).double(message.user_rating_avg);
    }
    if (message.total_ratings !== 0) {
      writer.uint32(16).int32(message.total_ratings);
    }
    if (message.rating_bias !== 0) {
      writer.uint32(25).double(message.rating_bias);
    }
    if (message.critic_type !== 0) {
      writer.uint32(32).int32(message.critic_type);
    }
    if (message.user !== undefined) {
      UserResponse.encode(message.user, writer.uint32(42).fork()).join();
    }
    if (message.created_at !== undefined) {
      Timestamp.encode(message.created_at, writer.uint32(50).fork()).join();
    }
    if (message.updated_at !== undefined) {
      Timestamp.encode(message.updated_at, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.user_rating_avg = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total_ratings = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.rating_bias = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.critic_type = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.user = UserResponse.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.created_at = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updated_at = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserStatsResponse {
    return {
      user_rating_avg: isSet(object.user_rating_avg) ? globalThis.Number(object.user_rating_avg) : 0,
      total_ratings: isSet(object.total_ratings) ? globalThis.Number(object.total_ratings) : 0,
      rating_bias: isSet(object.rating_bias) ? globalThis.Number(object.rating_bias) : 0,
      critic_type: isSet(object.critic_type) ? criticTypeFromJSON(object.critic_type) : 0,
      user: isSet(object.user) ? UserResponse.fromJSON(object.user) : undefined,
      created_at: isSet(object.created_at) ? fromJsonTimestamp(object.created_at) : undefined,
      updated_at: isSet(object.updated_at) ? fromJsonTimestamp(object.updated_at) : undefined,
    };
  },

  toJSON(message: UserStatsResponse): unknown {
    const obj: any = {};
    if (message.user_rating_avg !== 0) {
      obj.user_rating_avg = message.user_rating_avg;
    }
    if (message.total_ratings !== 0) {
      obj.total_ratings = Math.round(message.total_ratings);
    }
    if (message.rating_bias !== 0) {
      obj.rating_bias = message.rating_bias;
    }
    if (message.critic_type !== 0) {
      obj.critic_type = criticTypeToJSON(message.critic_type);
    }
    if (message.user !== undefined) {
      obj.user = UserResponse.toJSON(message.user);
    }
    if (message.created_at !== undefined) {
      obj.created_at = fromTimestamp(message.created_at).toISOString();
    }
    if (message.updated_at !== undefined) {
      obj.updated_at = fromTimestamp(message.updated_at).toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserStatsResponse>, I>>(base?: I): UserStatsResponse {
    return UserStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserStatsResponse>, I>>(object: I): UserStatsResponse {
    const message = createBaseUserStatsResponse();
    message.user_rating_avg = object.user_rating_avg ?? 0;
    message.total_ratings = object.total_ratings ?? 0;
    message.rating_bias = object.rating_bias ?? 0;
    message.critic_type = object.critic_type ?? 0;
    message.user = (object.user !== undefined && object.user !== null)
      ? UserResponse.fromPartial(object.user)
      : undefined;
    message.created_at = (object.created_at !== undefined && object.created_at !== null)
      ? Timestamp.fromPartial(object.created_at)
      : undefined;
    message.updated_at = (object.updated_at !== undefined && object.updated_at !== null)
      ? Timestamp.fromPartial(object.updated_at)
      : undefined;
    return message;
  },
};

function createBaseGlobalStatsResponse(): GlobalStatsResponse {
  return { global_rating_avg: 0, total_ratings: 0, created_at: undefined, updated_at: undefined };
}

export const GlobalStatsResponse: MessageFns<GlobalStatsResponse> = {
  encode(message: GlobalStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.global_rating_avg !== 0) {
      writer.uint32(9).double(message.global_rating_avg);
    }
    if (message.total_ratings !== 0) {
      writer.uint32(16).int32(message.total_ratings);
    }
    if (message.created_at !== undefined) {
      Timestamp.encode(message.created_at, writer.uint32(26).fork()).join();
    }
    if (message.updated_at !== undefined) {
      Timestamp.encode(message.updated_at, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlobalStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.global_rating_avg = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total_ratings = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.created_at = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updated_at = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalStatsResponse {
    return {
      global_rating_avg: isSet(object.global_rating_avg) ? globalThis.Number(object.global_rating_avg) : 0,
      total_ratings: isSet(object.total_ratings) ? globalThis.Number(object.total_ratings) : 0,
      created_at: isSet(object.created_at) ? fromJsonTimestamp(object.created_at) : undefined,
      updated_at: isSet(object.updated_at) ? fromJsonTimestamp(object.updated_at) : undefined,
    };
  },

  toJSON(message: GlobalStatsResponse): unknown {
    const obj: any = {};
    if (message.global_rating_avg !== 0) {
      obj.global_rating_avg = message.global_rating_avg;
    }
    if (message.total_ratings !== 0) {
      obj.total_ratings = Math.round(message.total_ratings);
    }
    if (message.created_at !== undefined) {
      obj.created_at = fromTimestamp(message.created_at).toISOString();
    }
    if (message.updated_at !== undefined) {
      obj.updated_at = fromTimestamp(message.updated_at).toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GlobalStatsResponse>, I>>(base?: I): GlobalStatsResponse {
    return GlobalStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GlobalStatsResponse>, I>>(object: I): GlobalStatsResponse {
    const message = createBaseGlobalStatsResponse();
    message.global_rating_avg = object.global_rating_avg ?? 0;
    message.total_ratings = object.total_ratings ?? 0;
    message.created_at = (object.created_at !== undefined && object.created_at !== null)
      ? Timestamp.fromPartial(object.created_at)
      : undefined;
    message.updated_at = (object.updated_at !== undefined && object.updated_at !== null)
      ? Timestamp.fromPartial(object.updated_at)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Timestamp {
  if (o instanceof globalThis.Date) {
    return toTimestamp(o);
  } else if (typeof o === "string") {
    return toTimestamp(new globalThis.Date(o));
  } else {
    return Timestamp.fromJSON(o);
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
