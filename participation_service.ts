// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: participation_service.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import { Empty } from "./google/protobuf/empty";
import {
  CreateParticipationRequest,
  DeleteParticipationRequest,
  ListParticipationsResponse,
  ParticipationResponse,
} from "./participation";

export const protobufPackage = "songcontestrater";

export interface Participation {
  ListParticipations(request: Empty): Promise<ListParticipationsResponse>;
  CreateParticipation(request: CreateParticipationRequest): Promise<ParticipationResponse>;
  DeleteParticipation(request: DeleteParticipationRequest): Promise<ParticipationResponse>;
}

export const ParticipationServiceName = "songcontestrater.Participation";
export class ParticipationClientImpl implements Participation {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ParticipationServiceName;
    this.rpc = rpc;
    this.ListParticipations = this.ListParticipations.bind(this);
    this.CreateParticipation = this.CreateParticipation.bind(this);
    this.DeleteParticipation = this.DeleteParticipation.bind(this);
  }
  ListParticipations(request: Empty): Promise<ListParticipationsResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListParticipations", data);
    return promise.then((data) => ListParticipationsResponse.decode(new BinaryReader(data)));
  }

  CreateParticipation(request: CreateParticipationRequest): Promise<ParticipationResponse> {
    const data = CreateParticipationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateParticipation", data);
    return promise.then((data) => ParticipationResponse.decode(new BinaryReader(data)));
  }

  DeleteParticipation(request: DeleteParticipationRequest): Promise<ParticipationResponse> {
    const data = DeleteParticipationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteParticipation", data);
    return promise.then((data) => ParticipationResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
